---
title: "Docker"
author: "Romanov Stanislav"
date: "09 12 2021"
output: html_document
lang: russian
tags: ["Docker", "Программы"]
---


Higlass - один из самых популярных геномных браузеров, предназначенный для удобного просмотра контактных матриц HiC.


```{r echo=FALSE}

blogdown::shortcode_open(.name = "expand", "Что такое Higlass")
```


```{r echo=FALSE}
blogdown::shortcode("notice","note" ,.content = "Higlass представляет собой интерактивный веб-браузер, написанный на языке Javas Sript. Благодаря этому окно браузера можно интегрировать в html-страницы, но подходит только для тех, кто имеет опыт работать с этой технологией javascript API. Авторы также интегрировали браузер в библиотеку Python, что позволяет открывать окно браузера внутри сессии Python. Это удобно для тех, кто предпочитает анализировать данные в среде разработки Jupyter. Кроме того, авторы создали серверную версию Higlass, что позволяет запускать браузер либо на локальной машине, либо на сервере института. Серверное приложение открывается в интернет-браузере по ссылке и дает возможность пользователям добавлять профили в сессию в интерактивном режиме.")
```

```{r echo=FALSE}
blogdown::shortcode("notice","note" ,.content = "Стоит обратить внимание, что хотя интерфейс программы интуитивный, установка, управление данными и настройка работы Higlass на рабочей станции может оказаться огромной головной болью особенно для людей, не обладающих навыками программирования. Авторы, по-видимому, не ставили перед собой задачу сделать управление Higlass интуитивно понятным. Это видно по качеству написания документации, которая содержит несостыковки, и практически не содержит деталей. Поэтому требуется немало времени, чтобы разобраться, как заставить эту штуку работать. В силу этого ниже дан более-менее подробный алгоритм по установке Higlass, также описаны некоторые наиболее часто встречающиеся задачи.")
                    
```


```{r echo=FALSE}

blogdown::shortcode_close(.name = "expand")
```

### Документация

```{r echo=FALSE}
blogdown::shortcode_open("expand","Смотреть подробнее")
```


[Ссылка на статью](https://doi.org/10.1186%2Fs13059-018-1486-1)

Подробное руководство пользователя доступно по [ссылке](https://docs.higlass.io/). 
[Видео урок Python API](https://www.youtube.com/watch?v=v62k4Ok1S8g)


```{r echo=FALSE}
blogdown::shortcode_close("expand")
```


### Установка

Сторонние руководства


```{r echo=FALSE}
blogdown::shortcode_open("expand","Полезные ссылки")
```

[Документация по установке и системные требования](https://docs.docker.com/desktop/install/windows-install/)
[Видео пример установки с Hyper-V](https://www.youtube.com/watch?v=a5mxBTGfC5k)
[Инструкция по установке на Windows с WSL2](https://tretyakov.net/post/ustanovit-docker-na-windows-10-wsl2/)
[Еще одна инструкция по установке на Windows с WSL2](https://ip-calculator.ru/blog/ask/ustanovka-docker-na-windows-10-home/)

```{r echo=FALSE}
blogdown::shortcode_close("expand")
```

1.	В **BIOS** включить виртуализацию. Для этого нужно перезагрузить компьютер, войти в BIOS, затем в одном из окон найти строчку, которая включает слова Virtualization (Intel Virtualization Technology, VT, Virtualization и пр.) и Hyper-V. Затем перевести в режим Enabled. 

![Куда смотреть в BIOS?](/Programs/Docker.files/bios.png?width=20pc)

2.	Скачать установщик **Docker Desktop** на сайте [docker.com](https://www.docker.com/). Во время установки следовать инструкциям.

![Официальный сайт](/Programs/Docker.files/docker.png?width=20pc)

Если все работает, то после установки вы должны увидеть вот такое окно:

![Когда все нормально](/Programs/Docker.files/Normal.png?width=20pc)

Но программа может выдать ошибки из-за неполной установки зависимостей. В таком случае будут видны такие ошибки:

![WSL2 is not installed](/Programs/Docker.files/noWSL.png?width=20pc)

![WSL2 installation is incomplete](/Programs/Docker.files/incomplete.png?width=20pc)

Вообще в сообщении об ошибке уже написано, что делать, но если есть затруднения, то нужно сделать как указано ниже.

2.	Если возникает ошибка **WSL2 is not installed** или **WSL2 installation is incomplete** то нужно сделать следующее:

```{r echo=FALSE}
blogdown::shortcode_open("expand","Видео-помощь")
```


[WSL2 installation is incomplete](https://www.youtube.com/watch?v=SjdFip4t3kI)

[WSL2 is not installed](https://www.youtube.com/watch?v=vJ2fJm3CoyE)


```{r echo=FALSE}
blogdown::shortcode_close("expand")
```



Решением будет установка подсистемы Linux для Windows, как это описано в руководстве [здесь](https://learn.microsoft.com/ru-ru/windows/wsl/install) и [здесь](https://learn.microsoft.com/ru-ru/windows/wsl/install-manual).
На первый взгляд это кажется очень сложным, но на самом деле потребует только несколько раз войти в **PowerShell** и **MicrosoftStore**.

```{r echo=FALSE}
blogdown::shortcode_open("expand","Как открыть PowerShell")
```

```{r echo=FALSE}
blogdown::shortcode("notice","note" ,.content = "Чтобы войти в **PowerShell** нужно нажать Пуск и в строке поиска ввести *«PowerShell»*. Появившийся ярлык нажать правой кнопкой и выбрать опцию *«Запустить от имени администратора»*")

```

![Поиск в меню Пуск](/Programs/Docker.files/powershell.jpg?width=20pc)

```{r echo=FALSE}
blogdown::shortcode_close("expand")
```


Далее нажать *Пуск* и в строке поиска ввести *«Дополнительные компоненты»*. В появившемся окне выбрать *«Другие компоненты Windows»*. Далее поставить галочки напротив *«Платформа виртуальной машины»* и *«Подсистема Linux для Windows»*.


```{r echo=FALSE}
blogdown::shortcode_open("expand","Как найти Другие компоненты Windows")
```


![Поиск в меню Пуск](/Programs/Docker.files/additional.png?width=20pc)
![Дополнительные компоненты](/Programs/Docker.files/others.png?width=20pc)
![Другие компоненты Windows](/Programs/Docker.files/components.png?width=20pc)


```{r echo=FALSE}
blogdown::shortcode_close("expand")
```

### Пример работы

1. Зайти в `PowerShell` или `CommanLine`

```{r echo=FALSE}
blogdown::shortcode_open("expand","Способ 1")
```

Нажать комбинацию клавиш Windows+R и в появившемся окне ввести *"powershell"* или *"cmd"*, соответственно.

```{r echo=FALSE}
blogdown::shortcode_close("expand")
```

```{r echo=FALSE}
blogdown::shortcode_open("expand","Способ 2")
```

Нажать клавишу Windows или кнопку Пуск на рабочем столе и в появившейся строке поиска ввести *"powershell"* или *"Командная строка"*, соответственно. Открыть приложение.

```{r echo=FALSE}
blogdown::shortcode_close("expand")
```

2. В появившемся окне ввести:
```
$docker run -d -p 80:80 docker/getting-started 
```
Эту команда написана в документации приложения, с которым вы работаете. Обычно нет нужды переписывать ее. В ответ docker скачает образ *(image)* контейнера. 

```{r echo=FALSE}
blogdown::shortcode("notice","note" ,.content = "Образ - это неизменяемый файл, содержащий исходный код, библиотеки, зависимости, инструменты и другие файлы, необходимые для запуска приложения. Из-за того, что образы предназначены только для чтения их иногда называют снимками *(snapshot)*. Образ используется как шаблон для построения контейнера. При создании контейнера поверх образа добавляет слой, доступный для записи, что позволяет менять его по своему усмотрению.")

```

В результате в окне приложения docker в разделе images появится информация о скачанном образе. В данном случае это `docker/getting-started`. Нужно обратить внимание, что название образа совпадает с названием, которое было введен в команде выше. Скачав образ один раз, с него можно запустить несколько одинаковых контейнеров.

![Image](/Programs/Docker.files/image.png?width=20pc)

3. Нужно запустить контейнер. Для этого навести бегунок мыши на название образа, затем нажать Run.

![ImageRun](/Programs/Docker.files/imagerun.png?width=20pc)

В разделе `Container` появится название контейнера. В данном случае это `condescending_bhaskara`. Само название может отличаться от названия образа.

![Container](/Programs/Docker.files/container.png?width=20pc)

Нужно обратить внимание на `port`. Зная этот параметр, можно обратиться к запущеной программе из окна браузера. Мы можем узнать физический адрес, к которому нужно будет обращаться при помощи раздела `Viewport`, в который можно попасть, если нажать на название контейнера.

![Container](/Programs/Docker.files/port.png?width=20pc)

Либо можно ввести в PowerShell или cmd команду 

```
  $docker ps
```



В данном случае port обозначен как`0.0.0.0:80`. Это означает, что порт контейнера (образно, это индекс, по которому контейнер понимает, что данные предназначены именно для него) имеет номер 80 и прикреплен к tcp-порту локальной машины (образно, это адрес, по которому машина понимает, что общается по протоколу tcp). Лего заметить, что мы вводили число `80:80` в команде `docker run` рядом с параметром -p. Перед двойточием указан порт контейнера, после двоеточия указан порт tcp. Если команда выглядит "-p 8989:80", то порт контейнера равен 8989. Именно он нужен, чтобы войти в программу через окно браузера.

Чтобы обратиться к программе, нужно войти в браузер и ввести в адресную строку "localhost:80". Здесь 80 - это порт контейнера, а localhost - адрес локальной машины, то есть наш собственный компьютер. По сути после включения контейнера на компьютере запускается сервер, к которому можно обращаться всегда, пока запущен контейнер.

![Container](/Programs/Docker.files/program.png?width=20pc)








