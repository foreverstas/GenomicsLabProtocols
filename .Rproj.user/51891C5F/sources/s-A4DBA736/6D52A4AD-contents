---
title: "Анализ low-throughput MPRA в стиле STARR-seq"
author: "Stanislav Romanov"
date: '2023-03-16'
tags: ["Очистка сефадексом","MPRA", "STARR-seq","Sephadex"]
---

### Краткое содержание

Антошина Полина отсеквенировала библиотеки эксперимента [STARR-seq](https://doi.org/10.1002/cpmb.105) в клетках CHO. В ходе эксперимента фрагменты генома CHO-клеток (клетки яичника китайского хомячка), ассоциированные с гистоновой модификацией H3K27ac, были помещены в конструкцию **hSTARR-seq_ORI** (Addgene [#99296](https://www.addgene.org/99296/)). Полученный пул плазмид был трансфецирован в клетки CHO и через два дня из них была выделена РНК. Принципиальная схема эксперимента показана на рисунке ниже.

![](/Projects/ltSTARR.file/Img1.png?classes=shadow&width=20pc)

Фрагменты в составе плазмидного пула (Input) и наработанной с плазмид РНК (STARR) были амплифицированы индексированными праймерами NebNEXT в двух технических репликах и отсеквенированы на платформе [MiSeq](https://www.illumina.com/systems/sequencing-platforms/miseq.html) в режиме парных прочтений 2x75bp. Целью показанного ниже биоинформатического анализа являлась идентификация последовательностей, встроенных в плазмидный пул, и оценка их регуляторной активности.

```{r echo=FALSE}
blogdown::shortcode("notice","info" ,.content = "Фрагменты кода и названия файлов представлены с изменениями для более удобного восприятия.")
```

### Входные данные

В результате секвенирования имелось 8 файлов в формате fastq.gz.

    Input1_R1.fastq.gz
    Input1_R2.fastq.gz
    Input2_R1.fastq.gz
    Input2_R2.fastq.gz
    STARR1_R1.fastq.gz
    STARR1_R2.fastq.gz
    STARR2_R1.fastq.gz
    STARR2_R2.fastq.gz

Парные риды каждой библиотеки помещены в отдельные файлы, помеченные как `_R1` и `_R2`.

Перед анализам желательно глазами просмотреть содержимое файлов. В командной строке Linux это можно сделать следующей командой:

    ~$  zcat Input1_R1.fastq.gz | head -n 20

    @M02435:118:000000000-JWMPJ:1:1101:13421:1287 1:N:0:1
    NNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN
    +
    ###################################
    @M02435:118:000000000-JWMPJ:1:1101:14755:1288 1:N:0:1
    NNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN
    +
    ###################################
    @M02435:118:000000000-JWMPJ:1:1101:13148:1305 1:N:0:1
    NNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN
    +
    ###################################
    @M02435:118:000000000-JWMPJ:1:1101:12101:1311 1:N:0:1
    NNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN
    +
    ###################################
    @M02435:118:000000000-JWMPJ:1:1101:14521:1311 1:N:0:1
    CTAAGTTTCCCTTTTAACTCATACTTTTCTTTTTTTTCCTTTCTTTTTTTCTTTCTCTTTTTTTTTTCTTTTTTTT
    +
    6B<,6CFFCCEFGGG,-@CC,E,;CC,6-C<C@,+++,,6,,,,,,<,++,;6,,,,66,;9++7+6,,<,,,+++

Вот так выглядят спаренные риды для этой библиотеки:

    ~$  zcat Input1_R2.fastq.gz | head -n 20

    @M02435:118:000000000-JWMPJ:1:1101:13421:1287 2:N:0:1
    CTTTCTTTTTTTCTTCTTTTTTTTTTTTTTTTTTTTTCTCTTTTTTCTCCTTTTCTTTTTTTTTTTTTTTTTTTTT
    +
    --,86,,-,,++6,;,,;,;,+++++++++7+6+++4,95,,5,,7,,,,,9,5,,99,,++++++++++++++**
    @M02435:118:000000000-JWMPJ:1:1101:14755:1288 2:N:0:1
    CTATCTTTTTTTCTTCTTTTTTTTTTTTTTTTTATTTCTCTTTTTTCTCCTTTTCTTTTTTTTTTTTTTTTTTTTT
    +
    --,6,,,-,,++6,;,,;,6,+++++++++7+6,,,969,,,9,,7,,,,,9,9,,95,,++++++++++++++++
    @M02435:118:000000000-JWMPJ:1:1101:13148:1305 2:N:0:1
    CTTTCTTTTTATCTTCTTTTTTTTTTTTTTTTTTTTTCTCTTTTTTCTCCTTTTCTTTTTTTTTTTTTTTTTTTTT
    +
    --,6,,,-,,,,-,;,,6,6,+++++++++6+6+++6,66,,6,,44,55,9,9,,55,,+++++++++++++++*
    @M02435:118:000000000-JWMPJ:1:1101:12101:1311 2:N:0:1
    CTTTCTGTATATCTTCTTTTTTTTTTTTTTTTTATATCTCTTTTTTCTCCTTTTCTTTTTTTTTTTTTTTTTTTTT
    +
    --,86,,-,,,,6,;,,;,;,+++++++++7+7,,,9,9,,,9,,76,6,,:,96,<9,,++++++++++++++++
    @M02435:118:000000000-JWMPJ:1:1101:14521:1311 2:N:0:1
    CTTTTTTTCCCCCTTCTTCTTTTCTTCCTTTTCTTCTTCTTTTTCTTTCTCTTTTTCTTTTTCCTTTTTTTCTTTT
    +
    -8,,,;8@,,,,+7C,,,6;@,;,6;,,,;,,,,6,,,,,,,,,,,,,,;,,;,;,,6,,,66,<,,,,++,,,,5

Легко понять, что на каждое прочтение в файле отведено четыре строки. Первая строка начинается с символа `@` и является заголовком, в котором содржится уникальный идентификатор `M02435:118:000000000-JWMPJ:1:1101:13421:1287` (у всех ридов они разные) и через пробел служебную последовательность тегов `1:N:0:1`. Первое число в теге - это номер рида в паре (1 для `_R1` и 2 для `_R2`). Последнее число в теге - это номер библиотеки. В нашем случае все прочтения из библиотеки Input1 несут теговый номер 1, Input2 - номер 2, STARR1 - номер 3, а STARR2- номер 4. Это понадобится в дальнейшем.

```{r echo=FALSE}
blogdown::shortcode("notice","info" ,.content = "Обратите внимание, что спаренные прочтения в файлах _R1 и _R2 перечислены в одинаковом порядке. Это видно по идентификаторам. Для программ, которые работают с fastq-файлами это очень важно.")
```

Вторая строка - непосредственно прочтение фрагмента. Третья строка - знак `+`, который отделяет строку с прочтением от строки с качеством каждого нуклеотида в прочтении. Качество нуклеотида определяется значением Phred-Score, которое может принимать целое значение от 0 (минимальное качество, нуклеотид не опознан) до 41 (максимальное качество, вероятность ошибки \~10^-4^. Все числа от 0 до 41 закодированы одним из символов, взятых последовательно из таблицы кодировки ASCII (все англоязычные символы на клавиатуре), где числу 0 соответсвует `!`, а числу 41 соответствует буква `I`. Такое кодирование Phred-Score называется Phred+33, потому `!` является 33-м по счету символом в таблице ASCII. Надо понимать, что нуклеотиды, для которых мы видим символы `!`, `"` ,`#` - это те, что секвенатор не смог распознать. Если же мы види символы английского алфавита, то качество прочтения таких нуклеотидов очень хорошее. 

![](/Projects/ltSTARR.file/Img1.png?classes=shadow&width=20pc)

Первое, что бросается в глаза - наличие фрагментов с последовательностью `NNNNN…`. Такие 36 буквенные риды возникают из-за того, что секвенатор не смог прочитать последовательность фрагментов. Быстрый просмотр показывает, что такие неопределенные фрагменты есть во всех образцах и встречатся довольно часто. Это указывает, что во время подготовки библиотек что-то пошло не по плану. Если фрагмент проиндексировался, но чтение с одного из праймеров невозможно, то значит мы имеем дело с праймеровыми димерами (в них отсутсвует одна из последоваетльностей, необхоимых для присоединения затравки на стадии чтения ридов R1 или R2). Это нужно учесть в будущих экспериментах.

```{r echo=FALSE}
blogdown::shortcode("notice","tip" ,.content = "Визуальный просмотр прочтений очень полезен, поскольку позволяет выявить недостатки при пробоподготовке библиотек.")
```

Важно отметить, что секвенирование в режиме парных прочтений было выполнено для того, чтобы точно определить фрагменты ДНК с двух сторон, а такие низкокачественные прочтения никак этому не способствуют. Поэтому от них нужно будет избавиться.

