---
title: "Docker"
author: "Romanov Stanislav"
date: "09 12 2021"
output: html_document
lang: russian
tags: ["Docker", "Программы"]
editor_options: 
  markdown: 
    wrap: 72
---

### Для чего нужен Docker

Раньше разработчики биоинформатических алгоритмов предоставляли свои
продукты в виде готовых программ, импортируемых библиотек, отдельных
скриптов. Однако со временем стабильность работы программ стала слишком
зависеть от версии операционной системы и установленных на компьютере
зависимостей. В результате, зачастую наиболее распространенные
биоинформатические алгоритмы доступны только пользователям одной
операционной системы (тот же `bowtie2` отсутствует на Windows). Чтобы
решить эту проблему, некоторые разработчики стали предоставлять
приложения в форме контейнеров *(conteiners)* - полностью изолированных
от операционной системы самодостаточных наборов программ, включающие
полный каталог скриптов и все зависимости. Разработчики приложения
добавляют в контейнер все необходимые компоненты операционной системы, и
проверяют зависимости на совместимость, благодаря чему приложение будет
работать без ошибок на любой операционной системе. Запуск приложения в
контейнере означает, что программа никак не зависит от окружающих
процессов и операционной системы, в которой запущен контейнер. Самым
распространенным менеджером контейнеров является Docker. С его помощью
на ОС Windows можно запускать такие программы как `bowtie2`, `hisat2`,
`higlass` и любые другие программы, которые были написаны специально под
Linux или любую другую ОС. Вообще, разработчики все чаще предоставляют
свои программы именно в форме docker-контейнеров, поэтому всем
заинтересованным в биоинофрматике необходимо иметь хотя бы минимальные
навыки работы с Docker.

```{r echo=FALSE}

blogdown::shortcode_open(.name = "expand", "Пояснения")
```

```{r echo=FALSE}
blogdown::shortcode("notice","note" ,.content = "Например, разработчики создают приложение в системе разработки (например, Ubuntu) — там все настроено, приложение работает. Когда приложение готово, его нужно перенести в систему тестирования, а затем в продуктивную среду (например, macOS или Windows). Если в одной из сред нет нужной зависимости, приложение не будет работать. Программистам придется отвлечься от разработки и совместно с командой поддержки разобраться в ситуации. В контейнерах такой проблемы нет, так как они содержат в себе все необходимое для запуска приложения. Специалисты занимаются разработкой, а не решением инфраструктурных проблем.")
                    
```

```{r echo=FALSE}
blogdown::shortcode("notice","note" ,.content = "На машине может быть запущено одновременно несколько контейнеров, при этом каждый контейнер будет занимать только строго определенную часть процессорной мощности.")
```

```{r echo=FALSE}
blogdown::shortcode("notice","note" ,.content = "По сути, контейнер является директорией, внутри которой хранятся все нужные для программы файлы и внутри которой производятся все процессы. После запуска контейнера файлы из операционной системы можно перекидывать внутрь контейнера в реальном времени.")
```

```{r echo=FALSE}
blogdown::shortcode("notice","note" ,.content = "Контейнеризация позволяет избежать проблем совместимости между операционными системами. Для того, чтобы запустить приложение под Linux на операционной системе Windows раньше приходилось устанавливать виртуальную машину, выделять под нее сектор на диске, искать в интернете образ операционной системы. Это было долго и требовало очень много вычислительных ресурсов. Контейнеры содержат только необходимые компоненты операционной системы и все исходные файлы предоставляются разработчиком, а загрузка контейнера происходит одной командой.")

```

```{r echo=FALSE}

blogdown::shortcode_close(.name = "expand")
```

### Документация

```{r echo=FALSE}
blogdown::shortcode_open("expand","Смотреть подробнее")
```

[Официальная документация](https://docs.docker.com/) [Видео
уроки](https://youtube.com/playlist?list=PLD5U-C5KK50XMCBkY0U-NLzglcRHzOwAg)
[Инструкция по установке на Windows с
WSL2](https://tretyakov.net/post/ustanovit-docker-na-windows-10-wsl2/)
[Еще одна инструкция по установке на Windows с
WSL2](https://ip-calculator.ru/blog/ask/ustanovka-docker-na-windows-10-home/)

```{r echo=FALSE}
blogdown::shortcode_close("expand")
```

### Установка

Сторонние руководства

```{r echo=FALSE}
blogdown::shortcode_open("expand","Полезные ссылки")
```

[Документация по установке и системные
требования](https://docs.docker.com/desktop/install/windows-install/)
[Видео пример установки с
Hyper-V](https://www.youtube.com/watch?v=a5mxBTGfC5k) [Инструкция по
установке на Windows с
WSL2](https://tretyakov.net/post/ustanovit-docker-na-windows-10-wsl2/)
[Еще одна инструкция по установке на Windows с
WSL2](https://ip-calculator.ru/blog/ask/ustanovka-docker-na-windows-10-home/)

```{r echo=FALSE}
blogdown::shortcode_close("expand")
```

1.  В **BIOS** включить виртуализацию. Для этого нужно перезагрузить
    компьютер, войти в BIOS, затем в одном из окон найти строчку,
    которая включает слова Virtualization (Intel Virtualization
    Technology, VT, Virtualization и пр.) и Hyper-V. Затем перевести в
    режим Enabled.

![Куда смотреть в BIOS?](/Programs/Docker.files/bios.png?width=20pc)

2.  Скачать установщик **Docker Desktop** на сайте
    [docker.com](https://www.docker.com/). Во время установки следовать
    инструкциям.

![Официальный сайт](/Programs/Docker.files/docker.png?width=20pc)

Если все работает, то после установки вы должны увидеть вот такое окно:

![Когда все нормально](/Programs/Docker.files/Normal.png?width=20pc)

Но программа может выдать ошибки из-за неполной установки зависимостей.
В таком случае будут видны такие ошибки:

![WSL2 is not installed](/Programs/Docker.files/noWSL.png?width=20pc)

![WSL2 installation is
incomplete](/Programs/Docker.files/incomplete.png?width=20pc)

Вообще в сообщении об ошибке уже написано, что делать, но если есть
затруднения, то нужно сделать как указано ниже.

2.  Если возникает ошибка **WSL2 is not installed** или **WSL2
    installation is incomplete** то нужно сделать следующее:

```{r echo=FALSE}
blogdown::shortcode_open("expand","Видео-помощь")
```

[WSL2 installation is
incomplete](https://www.youtube.com/watch?v=SjdFip4t3kI)

[WSL2 is not installed](https://www.youtube.com/watch?v=vJ2fJm3CoyE)

```{r echo=FALSE}
blogdown::shortcode_close("expand")
```

Решением будет установка подсистемы Linux для Windows, как это описано в
руководстве
[здесь](https://learn.microsoft.com/ru-ru/windows/wsl/install) и
[здесь](https://learn.microsoft.com/ru-ru/windows/wsl/install-manual).
На первый взгляд это кажется очень сложным, но на самом деле потребует
только несколько раз войти в **PowerShell** и **MicrosoftStore**.

```{r echo=FALSE}
blogdown::shortcode_open("expand","Как открыть PowerShell")
```

```{r echo=FALSE}
blogdown::shortcode("notice","note" ,.content = "Чтобы войти в **PowerShell** нужно нажать Пуск и в строке поиска ввести *«PowerShell»*. Появившийся ярлык нажать правой кнопкой и выбрать опцию *«Запустить от имени администратора»*")

```

![Поиск в меню Пуск](/Programs/Docker.files/powershell.jpg?width=20pc)

```{r echo=FALSE}
blogdown::shortcode_close("expand")
```

Далее нажать *Пуск* и в строке поиска ввести *«Дополнительные
компоненты»*. В появившемся окне выбрать *«Другие компоненты Windows»*.
Далее поставить галочки напротив *«Платформа виртуальной машины»* и
*«Подсистема Linux для Windows»*.

```{r echo=FALSE}
blogdown::shortcode_open("expand","Как найти Другие компоненты Windows")
```

![Поиск в меню Пуск](/Programs/Docker.files/additional.png?width=20pc)
![Дополнительные
компоненты](/Programs/Docker.files/others.png?width=20pc) ![Другие
компоненты Windows](/Programs/Docker.files/components.png?width=20pc)

```{r echo=FALSE}
blogdown::shortcode_close("expand")
```

### Пример работы

1.  Зайти в `PowerShell` или `CommanLine`

```{r echo=FALSE}
blogdown::shortcode_open("expand","Способ 1")
```

Нажать комбинацию клавиш Windows+R и в появившемся окне ввести
*"powershell"* или *"cmd"*, соответственно.

```{r echo=FALSE}
blogdown::shortcode_close("expand")
```

```{r echo=FALSE}
blogdown::shortcode_open("expand","Способ 2")
```

Нажать клавишу Windows или кнопку Пуск на рабочем столе и в появившейся
строке поиска ввести *"powershell"* или *"Командная строка"*,
соответственно. Открыть приложение.

```{r echo=FALSE}
blogdown::shortcode_close("expand")
```

2.  В появившемся окне ввести:

```{=html}
<!-- -->
```
    $docker run -d -p 80:80 docker/getting-started

Эту команда написана в документации приложения, с которым вы работаете.
Обычно нет нужды переписывать ее. В ответ docker скачает образ *(image)*
контейнера, а затем запустит сам контейнер.

```{r echo=FALSE}
blogdown::shortcode("notice","note" ,.content = "Образ - это неизменяемый файл, содержащий исходный код, библиотеки, зависимости, инструменты и другие файлы, необходимые для запуска приложения. Из-за того, что образы предназначены только для чтения их иногда называют снимками *(snapshot)*. Образ используется как шаблон для построения контейнера. При создании контейнера поверх образа добавляет слой, доступный для записи, что позволяет менять его по своему усмотрению.")

```

В результате в окне приложения docker в разделе images появится
информация о скачанном образе. В данном случае это
`docker/getting-started`. Нужно обратить внимание, что название образа
совпадает с названием, которое было введен в команде выше. Скачав образ
один раз, с него можно запустить несколько одинаковых контейнеров.

![Image](/Programs/Docker.files/image.png?width=20pc)

3.  Нужно запустить контейнер. Для этого навести бегунок мыши на
    название образа, затем нажать Run.

![ImageRun](/Programs/Docker.files/imagerun.png?width=20pc)

В разделе `Container` появится название контейнера. В данном случае это
`condescending_bhaskara`. Само название может отличаться от названия
образа.

![Container](/Programs/Docker.files/container.png?width=20pc)

Запущеный таким образом контейнер содержит программу, к которой мы можем обратиться при помощи браузера. Самый простой способ сделать это - нажать на троеточие напротив названия контейнера и в сплывающем окне нажать `Open with browser`. Нужно понимать, что эта функция работает только при правильной настройке контейнера.

### Настройка доступа к контейнеру через браузер

По сути после включения контейнера на компьютере запускается сервер, к
которому можно обращаться всегда, пока запущен контейнер. Правильная настройка сервера может быть проблематичной, если не понимать, как это работает.

Чтобы узнать, по какому адресу располагается сервер, который мы сейчас запустили, нужно обратить внимание на параметр `port`, который можно увидеть в разделе `Viewport`,
в который можно попасть, если нажать на название контейнера.

![Container](/Programs/Docker.files/port.png?width=20pc)

С другой стороны, можно ввести в PowerShell или cmd команду

      $docker ps

В таком случае в консоли появится следующая таблица:

| CONTAINER ID | IMAGE                  | COMMAND                  | CREATED       | STATUS       | PORTS               | NAMES         |
|--------------|------------------------|--------------------------|---------------|--------------|---------------------|---------------|
| f5a36b69f508 | docker/getting-started | "/docker-entrypoint...." | 7 seconds ago | Up 5 seconds | 0.0.0.0:80-\>80/tcp | condescending_bhaskara |

Легко заметить, что информация в этой таблице почти полностью отображена в разделе Viewport. Здесь мы снова видим название контейнера, название образа, время создания, а также  адрес порта. 

Данные в ячейке `PORTS` позволяют понять, как можно обращаться к серверу через
браузер. В данном случае для нашего контейнера port обозначен как
`0.0.0.0:80 ->80/tcp`. Строка 0.0.0.0 перед двоеточием - это IP-адрес,
по которому браузер будет искать запущеную нами программу. В
компьютерных сетях этим адресом обозначают все возможные IP-адреса,
закрепленные за локальной машиной `localhost`, то есть закрепленные за
компьютером, на котором запущен docker. Число 80 после двоеточия
означает, что чтобы найти данные, принадлежащие именно запущеному на
локальной машине контейнеру, браузер должен будет искать данные с
индексом 80. Это так называемый ~порт контейнера~. Фрагмент `->80/tcp` говорит о том, что браузер будет
общаться с программой по протоколу TCP/IP через tcp-порт хоста c номером
80. Чтобы обратиться к программе, нужно войти в браузер на локальной
машине и ввести в адресную строку `localhost:80` или, что то же самое,
`http://localhost:80`.

Почему после запуска программы появился именно такой адрес? Лего
заметить, что мы вводили параметр `-p 80:80` в команде `docker run`.
Параметр -p заставляет docker привязать контейнер к конкретному
IP-адресу. Перед двойточием указан порт контейнера, после двоеточия
указан tcp-порт локальной машины под номером 80, по которому
осуществляется передача данных по протоколу TCP/IP. Если команда
выглядит "-p 8989:80", то порт контейнера равен 8989, страницу нужно
искать по IP-адресу локальной машины localhost, а передача данных будет
производиться по протоколу TCP/IP, и чтобы вызвать программу из
браузера, нужно ввести адрес `localhost:8989`.

В [документации docker](https://docs.docker.com/network/links/) есть много других примеров, как можно привязать контейнер к IP-адресам. Например, в команде `-p 8989:80` мы не пишем конкретный IP-адрес, к которому будет привязан контейнер, поэтому docker по умолчанию использует адрес 0.0.0.0. Но так как это общее название для всех адресов на локальной машине, мы не знаем, к какому IP-адресу локальной машины все-таки будет привязан контейнер. А значит, мы вынуждены писать в адресной строке "localhost:8989". В то же время, обращение `8989:80` является сокращенной формой, и полностью команда выглядит как `-p 0.0.0.0:8989:80/tcp`. Зная это, мы можем менять IP-адрес, порт контейнера, порт локальной машины, а также протокол передачи данных. Например, ввод `-p 127.0.0.1:8000:80/tcp` заставит docker привязать контейнер к адресу `http:/127.0.0.1:8000`.

![Container](/Programs/Docker.files/program.png?width=20pc)

Обратите внимание, что после того, как вы введете нужный адрес в адресную строку браузера, адрес поменяется в соответствием с URL-адресами, запрограммированными внутри сервера.

Если мы знаем название контейнера, мы можем быстро узнать порт при помощи команды PowerShell

    $docker port название_контейнера

### Как остановить контейнер?

Остановить запущеный контейнер можно из окна docker в разделе `Containers`, нажатием на значок Stop (серый квадратик) напротив названия контейнера. Либо нужно в  `PowerShell` ввести команду:

```

$docker stop название_контейнера
 
```

Обратите внимание, что здесь нужно вводить не название образа, а название контейнера.

При остановке контейнера все данные и временные файлы внутри контейнера будут сохранены до следующего запуска.

### Как удалить контейнер?

Удалить контейнер можно из окна docker в разделе `Containers`, нажатием на значок Delete (мусорный ящик) напротив названия контейнера. Либо в  `PowerShell` можно ввести команду:


```

$docker rm название_контейнера

```

После удаления контейнера все данные внутри контейнера будут удалены.

### Как удалить образ контейнера?

Удалить контейнер можно из окна docker в разделе `Images`, для этого нажно нажать на значок троеточия напротив названия контейнера, затем выбрать `Remove`. Либо в  `PowerShell` можно ввести команду:


      $docker image rm название_образа



